{"version":3,"sources":["calculator/calculator.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","Calculator","useState","calcLog","setCalcLog","expression","setExpression","useEffect","on","data","length","shift","calculation","console","log","emitfunc","exp","emit","CalcEventClick","event","slice","calculate","replace","result","eval","toString","e","className","colSpan","id","onClick","style","width","reverse","map","calc","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cb624b9.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./calculator.css\";\n\n\nconst socket = io(\"http://localhost:8000\");\n\nexport function Calculator() {  \n  const [calcLog, setCalcLog] = useState([]);\n  const [expression, setExpression] = useState(\"\");\n\n  useEffect(() => {   \n    socket.on(\"calculation\", data => {\n      if (calcLog.length === 10) calcLog.shift();\n      setCalcLog([...calcLog, data.calculation]);\n      console.log(calcLog);\n    });\n   \n  }, [calcLog]);\n\n  const emitfunc = exp => {    \n    socket.emit(\"subscribeToLogs\", {\n      calculation: exp\n    });\n    console.log(typeof calcLog[0]);\n    console.log(calcLog);\n    if (calcLog.length === 10) calcLog.shift();\n    setCalcLog([...calcLog, exp]);\n  };\n\n  const CalcEventClick = event => {\n    switch (event) {\n      case \"c\":\n        setExpression(expression.slice(0, -1));\n        break;\n\n      case \"d\":\n        setExpression(\"\");\n        break;\n\n      case \"=\":\n        calculate();\n        break;\n\n      default:\n        setExpression(expression.replace(/^(0+)/g, '') + \"\" + event);\n        break;\n    }\n  };\n\n  const calculate = () => {\n    try {\n     //eslint-disable-next-line no-eval\n     console.log(expression);\n      const result = eval(expression) | \"\";\n      setExpression(result.toString());\n      emitfunc(expression + \" = \" + result);\n    } catch (e) {\n      setExpression(\"error\")\n      emitfunc(expression + e);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex-container\">\n        <div className=\"flex-item\">\n          <table className=\"table-style\">\n            <tbody>\n              <tr>\n                <td colSpan={4} className=\"calc-header\" id=\"calc-header\">\n                  {expression}\n                </td>\n              </tr>\n              <tr>\n                <td className=\"button\" onClick={() => CalcEventClick(7)}> 7\n                </td>\n                <td className=\"button\" onClick={() => CalcEventClick(8)}>8\n                </td>\n                <td className=\"button\" onClick={() => CalcEventClick(9)}> 9\n                </td>\n                <td\n                  className=\"button button-operator\"\n                  onClick={() => CalcEventClick(\"/\")}\n                  id=\"buttonDivide\"\n                >\n                  /\n                </td>\n              </tr>\n              <tr>\n                <td className=\"button\" onClick={() => CalcEventClick(4)}>4\n                </td>\n                <td className=\"button\" onClick={() => CalcEventClick(5)}>5\n                </td>\n                <td className=\"button\" onClick={() => CalcEventClick(6)}>6\n                </td>\n                <td\n                  className=\"button button-operator\" onClick={() => CalcEventClick(\"*\")} id=\"buttonMul\"\n                >*\n                </td>\n              </tr>\n              <tr>\n                <td className=\"button\" onClick={() => CalcEventClick(1)}>1\n                </td>\n                <td\n                  className=\"button\" onClick={() => CalcEventClick(2)} >2\n                </td>\n                <td className=\"button\" onClick={() => CalcEventClick(3)}>3\n                </td>\n                <td className=\"button button-operator\" onClick={() => CalcEventClick(\"+\")} id=\"buttonPlus\"\n                >+\n                </td>\n              </tr>\n              <tr>\n                <td\n                  className=\"button button-cancel\" onClick={() => CalcEventClick(\"c\")}>c\n                </td>\n                <td className=\"button\" onClick={() => CalcEventClick(0)}>0\n                </td>\n                <td className=\"button\" onClick={() => CalcEventClick(\".\")}>. \n                </td>\n                <td className=\"button button-operator\" onClick={() => CalcEventClick(\"-\")} id=\"buttonMinus\">-\n                </td>\n              </tr>\n              <tr>\n                <td\n                  \n                  className=\"button button-cancel\"\n                  onClick={() => CalcEventClick(\"d\")}\n                  id=\"buttonDel\"\n                >\n                  Del\n                </td>\n                <td\n                  colSpan={3}\n                  style={{ width: \"190px\" }}\n                  className=\"button button-operator\"\n                  onClick={() => CalcEventClick(\"=\")}\n                  id=\"buttonEqual\"\n                > Cal\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <div className=\"flex-item\">\n          <strong>Posts</strong>\n          <div className=\"calc-log\">\n            <ul>\n              {calcLog.reverse().map((calc, index) => (\n                <li key={index}>{calc}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Calculator } from './calculator/calculator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}